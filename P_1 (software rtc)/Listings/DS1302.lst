C51 COMPILER V9.60.7.0   DS1302                                                            09/25/2024 11:51:30 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE DS1302
OBJECT MODULE PLACED IN .\Objects\DS1302.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE DS1302.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\DS
                    -1302.lst) TABS(2) OBJECT(.\Objects\DS1302.obj)

line level    source

   1          #include <reg51.h>
   2          #include "DS1302.h"
   3          #include <string.h>
   4          #include "stdio.h"
   5          
   6          
   7          
   8          
   9          
  10          //unsigned int read_bytes[12];    
  11          //void SCLK_Pulse()
  12          //{
  13          //  DS1302_CLK=1;
  14          //  DS1302_CLK=0;
  15          //}
  16          //void send_bit(unsigned int bitt)
  17          //{
  18          //  if(bitt!=0)
  19          //  {
  20          //    DS1302_IO=1;                    //one bit write
  21          //  }
  22          //  else
  23          //  {
  24          //    DS1302_IO=0;
  25          //  }
  26          //}
  27          //void write_byte(unsigned int byte)
  28          //{
  29          //  unsigned int i,Bit;
  30          //  for(i=0; i<8; i++)
  31          //  {                                        //rtc write byte
  32          //    Bit =byte &(1<<i);
  33          //    send_bit(Bit);
  34          //    SCLK_Pulse();
  35          //  }
  36          //}
  37          //unsigned char read_byte(unsigned char cmd)
  38          //{
  39          //  unsigned int j,dat=0;
  40          //  write_byte(cmd);
  41          //  for(j=0; j<8; j++)
  42          //  {
  43          //    dat>>=1;
  44          //    if(DS1302_IO)
  45          //    {
  46          //      dat|=0x80;
  47          //    }
  48          //    else
  49          //    {
  50          //      dat&=0x7F;
  51          //    }
  52          //    SCLK_Pulse();
  53          //  }
  54          //  return dat;
C51 COMPILER V9.60.7.0   DS1302                                                            09/25/2024 11:51:30 PAGE 2   

  55          //}
  56          //void DS1302_writebyte(unsigned char cmd, unsigned char value)
  57          //{
  58          //  DS1302_CE=1;
  59          //  write_byte(cmd);                      //rtc write byte at address
  60          //  write_byte(value);
  61          //  DS1302_CE=0;
  62          //}
  63          //void DS1302_readbyte()
  64          //{
  65          //  unsigned int dat=0,i,j;
  66          //  DS1302_CE=1;
  67          //  
  68          //  write_byte(DS1302_READ_BURST);
  69          //  for(i=0; i<8; i++)           //store in array
  70          //  {
  71          //    dat=0;
  72          //    for(j=0; j<8; j++)         //bit by bit read
  73          //    {
  74          //      dat>>=1;
  75          //    if(DS1302_IO)
  76          //    {                                           //reading ta enable
  77          //      dat|=0x80;
  78          //    }
  79          //    else
  80          //    {
  81          //      dat&=0x7F;
  82          //    }
  83          //    SCLK_Pulse();
  84          //    }
  85          //    read_bytes[i]=dat;
  86          //  } 
  87          //  DS1302_CE=0;  
  88          //}
  89          //void DS1302_init()
  90          //{
  91          //  unsigned char r;
  92          //  DS1302_CE=0; 
  93          //  DS1302_CLK=0;
  94          //  DS1302_writebyte(DS1302_CONTROL,0x00);
  95          //  DS1302_writebyte(DS1302_CHARGER,0xAB);
  96          //  
  97          //  r=read_byte(DS1302_SECOND_READ);                
  98          //  if((r&DS1302_SECOND_READ)!=0)
  99          //    DS1302_writebyte(DS1302_SECOND,0);              //zarah value zero ka
 100          //}
 101          
 102          //void DS1302_settime(unsigned char hour, unsigned char minute, unsigned char second)
 103          //{
 104          //  DS1302_writebyte(DS1302_SECOND,second);
 105          //  DS1302_writebyte(DS1302_MINUTE,minute);
 106          //  DS1302_writebyte(DS1302_HOUR,hour);
 107          
 108          //}
 109          //void lcd_display(unsigned char number)
 110          //{
 111          //  lcd_char(((number>>4)&0x0F)+0x30); //ten
 112          //  lcd_char((number&0x0F)+0x30);   //unit
 113          //}
 114          
 115          //void DS1302_gettime(void)
 116          //{
C51 COMPILER V9.60.7.0   DS1302                                                            09/25/2024 11:51:30 PAGE 3   

 117          //  lcd_set_cursor(0,0);
 118          //  lcd_string("TIME:");
 119          //  
 120          //  lcd_set_cursor(0,6);
 121          //  lcd_display(read_bytes[2]);
 122          //  lcd_char(':');
 123          //  delay(10);
 124          //  
 125          //  
 126          //  lcd_set_cursor(0,9);
 127          //  lcd_display(read_bytes[1]);
 128          //  lcd_char(':');
 129          //  delay(10);
 130          //  
 131          //  lcd_set_cursor(0,12);
 132          //  lcd_display(read_bytes[0]);
 133          //  delay(10);
 134          //    
 135          //}
 136          //void DS1302_setdate(unsigned char day, unsigned char month, unsigned char year)
 137          //{
 138          //DS1302_writebyte(DS1302_DATE,day);
 139          //DS1302_writebyte(DS1302_MONTH,month);
 140          //DS1302_writebyte(DS1302_YEAR,year);
 141          //}
 142          //void DS1302_getdate(void)
 143          //{
 144          //  lcd_set_cursor(1,0);
 145          //  lcd_string("DATE:");
 146          //  
 147          //  lcd_set_cursor(1,6);
 148          //  lcd_display(read_bytes[3]);
 149          //  lcd_char(':');
 150          //  delay(10);
 151          //  
 152          //  lcd_set_cursor(1,9);
 153          //  lcd_display(read_bytes[4]);
 154          //  lcd_char(':');
 155          //  delay(10);
 156          //  
 157          //  lcd_set_cursor(1,12);
 158          //  lcd_display(read_bytes[6]);
 159          //  delay(10);
 160          //}
 161          void inttoASCII(int num, char *buffer)
 162          {
 163   1        sprintf(buffer, "%d", num);
 164   1      }
 165          void lcd_display_int(int num)
 166          {
 167   1        char buffer[10];
 168   1        inttoASCII(num, buffer);
 169   1        lcd_string(buffer);
 170   1        
 171   1      }
 172          
 173          unsigned int dayinmonth (unsigned char mon, unsigned int year)
 174            {
 175   1          unsigned int day;
 176   1          switch(mon)
 177   1          {
 178   2            case 1: case 3: case 5: case 7: case 8: case 10: case 12:
C51 COMPILER V9.60.7.0   DS1302                                                            09/25/2024 11:51:30 PAGE 4   

 179   2              day=31;
 180   2            break;
 181   2            case 4: case 6: case 9: case 11:
 182   2              day=30;
 183   2            break;
 184   2            case 2:
 185   2              if((year % 4 == 0 && year % 100 != 0) || (year % 400 ==0))
 186   2              {
 187   3                day=29;
 188   3              }
 189   2              else
 190   2              {
 191   3                day=28;
 192   3              }
 193   2              break;
 194   2            default:
 195   2              day=0;
 196   2            
 197   2          }
 198   1          return day;
 199   1        }
 200          
 201          void lcd_init()
 202          {
 203   1        lcd_command(0x38);
 204   1        lcd_command(0x0C);
 205   1        lcd_command(0x01);
 206   1        lcd_command(0x80);
 207   1        
 208   1      }
 209          
 210          void lcd_command(unsigned char cmd)
 211          {
 212   1        lcd_data=cmd;
 213   1        RW=0;
 214   1        RS=0;
 215   1        EN=1;
 216   1        delay(10);
 217   1        EN=0;
 218   1        delay(10);
 219   1      }
 220          void lcd_char(unsigned char dat)
 221          {
 222   1        lcd_data=dat;
 223   1        RW=0;
 224   1        RS=1;
 225   1        EN=1;
 226   1        delay(10);
 227   1        EN=0;
 228   1        delay(10);
 229   1      }
 230          void lcd_string(unsigned char *str)
 231          {
 232   1        int i;
 233   1        for(i=0; str[i]!=0; i++)
 234   1        {
 235   2          lcd_char(str[i]);
 236   2        }
 237   1        
 238   1      }
 239          void lcd_set_cursor(unsigned char row, unsigned char col)
 240          {
C51 COMPILER V9.60.7.0   DS1302                                                            09/25/2024 11:51:30 PAGE 5   

 241   1        unsigned char position;
 242   1        if(row==0)
 243   1        {
 244   2          position=0x80+col;
 245   2        }
 246   1        else
 247   1        {
 248   2          position=0xC0+col;
 249   2        }
 250   1        lcd_command(position);
 251   1      }
 252          
 253          void delay (unsigned int time)
 254          {
 255   1        unsigned int i,j;
 256   1        for(i=0; i<time; i++)
 257   1        for(j=0; j<127; j++);
 258   1        
 259   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    319    ----
   CONSTANT SIZE    =      3    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      18
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
